// SPDX-License-Identifier: BSD-2-Clause
//
// Copyright (c) 2021 Alfredo Mazzinghi
//
// This software was developed by SRI International and the University of
// Cambridge Computer Laboratory (Department of Computer Science and
// Technology) under DARPA contract HR0011-18-C-0016 ("ECATS"), as part of the
// DARPA SSITH research programme.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.

syntax = "proto2";

import "protos/perfetto/trace/track_event/qemu_log_entry.proto";

package perfetto.protos;

// Details about a QEMU track event
message QEMUEventInfo {
    oneof data {
        // Executed instruction info
        QEMULogEntry instr = 1;
        // First 15 indices are reserved for high-frequency data
        // Stats histogram samples
        StatsHistogram histogram = 16;
        uint64 marker = 17;
    }
}

// QEMU statistics reporting
// Histograms can associate a single value or an interval to buckets
// (e.g. a memory range or a sample value).
message BBHistogramBucket {
    required uint64 start = 1;
    required uint64 end = 2;
    required int64 value = 3;
}

message BranchHistogramBucket {
    optional uint64 source = 1;
    required uint64 target = 2;
    required int64 value = 3;
}

// TODO(amazzinghi): Histograms can generate large messages, if they exceed the size
// of the trace buffer it gets very wrong. Probably we need to emit the samples as separate
// trace packets?
message StatsHistogram {
  repeated BBHistogramBucket bb_bucket = 1;
  repeated BranchHistogramBucket branch_bucket = 2;
}