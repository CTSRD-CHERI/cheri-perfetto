// Copyright (C) 2021 Alfredo Mazzinghi

syntax = "proto2";

package perfetto.protos;

// Details about a QEMU track event
message QEMUEventInfo {
    oneof data {
        // Executed instruction info
        QEMUInstruction instr = 1;
        // First 15 indices are reserved for high-frequency data
        // Stats histogram samples
        StatsHistogram histogram = 16;
    }
}

message Capability {
    optional bool valid = 1;
    optional bool sealed = 2;
    optional uint32 perms = 3;
    optional uint32 otype = 4;
    optional uint64 base = 5;
    optional uint64 cursor = 6;
    optional uint64 length = 7;
}

message Trap {
    enum TrapType {
        EXCEPTION = 0;
        INTERRUPT = 1;
    }
    required TrapType type = 1;
    required uint32 trap_number = 2;
}

enum ModeSwitch {
    USER = 0;
    SYSTEM = 1;
}

message RegInfo {
    required string name = 1;
    oneof value {
        uint64 int_val = 2;
        double fp_val = 3;
        Capability cap_val = 4;
    }
}

message MemInfo {
    enum MemOp {
        LOAD = 0;
        STORE = 1;
        CLOAD = 2;
        CSTORE = 3;
    }
    required uint64 addr = 1;
    required MemOp op = 2;
    oneof value {
        uint64 int_val = 3;
        double fp_val = 4;
        Capability cap_val = 5;
    }
}

message QEMUInstruction {
    // TODO(amazzinghi): This should be a bytes field but it is not yet supported.
    optional string opcode = 1;
    optional uint64 pc = 2;
    optional Trap trap = 3;
    optional ModeSwitch mode = 4;
    repeated RegInfo regs = 5;
    repeated MemInfo mem = 6;
}

// QEMU statistics reporting
// Histograms can associate a single value or an interval to buckets
// (e.g. a memory range or a sample value).
message HistogramBucket {
    required int64 interval_start = 1;
    required int64 interval_end = 2;
    required int64 value = 3;
}

// TODO(amazzinghi): Histograms can generate large messages, if they exceed the size
// of the trace buffer it gets very wrong. Probably we need to emit the samples as separate
// trace packets?
message StatsHistogram {
    enum StatsType {
        BB_HIT = 0;
        CALL_HIT = 1;
    }
    required StatsType type = 1;
    repeated HistogramBucket buckets = 2;
}